import paho.mqtt.client as mqtt 	#import the client1
import time
import datetime
import csv


def on_message(client, userdata, message):
	print("message received " ,str(message.payload.decode("utf-8")))
	print("message topic=",message.topic)
	print("message qos=",message.qos)
	print("message retain flag=",message.retain)

	with open(‘/home/pi/Desktop/meghana/sensor_readings.csv’, mode=’a’) as sensor_readings:
	sensor_write = csv.writer(sensor_readings, delimiter=’,’, quotechar='”‘, quoting=csv.QUOTE_MINIMAL)
	write_to_log = sensor_write.writerow([date_now(),time_now(),get_temp(),get_pressure()])
	return(write_to_log)


def on_connect(client, userdata, flags, rc):
	if rc==0:
		print("Connected with result code "+str(rc))
	else:
		print("Not connected")

def on_log(client, userdata, level, buf):
   	print("log: ",buf)

def on_disconnect(client, userdata, flags, rc=0):
	print("Disconnected with result code "+str(rc))
	
def get_temp():
temperature = 30
#----temperature = round((temperature),2)
#----temperature = temperature -2
#----temperature = str(temperature)
return(temperature)

def get_pressure():
pressure = 20  
#----pressure = round(pressure)
#----pressure = str(pressure)
return(pressure)

def date_now():
today = datetime.datetime.now().strftime(“%Y-%m-%d”)
today = str(today)
return(today)

def time_now():
now = datetime.datetime.now().strftime(“%H:%M:%S”)
now = str(now)
return(now)


broker="192.168.1.16"

print("creating new instance")

client = mqtt.Client("P1") 	#create new instance

client.on_message=on_message #attach function to callback
client.on_connect=on_connect
client.on_disconnect=on_disconnect
client.on_log=on_log

print("connecting to broker",broker)

client.connect(broker) #connect to broker
client.loop_start() #start the loop

print("Subscribing to topic","esp32/branch1/sensors")
client.subscribe("esp32/branch1/sensors")

print("Publishing message to topic","esp32/branch1/temp")
client.publish("esp32/branch1/temp","START")

time.sleep(4) # wait
client.loop_stop() #stop the loop
client.disconnect()